# - Config file for the @PKG_NAME@ package.
#
# For finding and loading @PKG_NAME@ from your project, type:
#
# find_package(@PKG_NAME@)
#
# It defines the following variables:
#
#  @PKG_NAME@_FOUND        - System has @PKG_NAME@.
#  @PKG_NAME@_INCLUDE_DIRS - include directories for @PKG_NAME@ and its dependencies.
#  @PKG_NAME@_LIBRARY_DIRS - Paths in which the linker should search for libraries.
#  @PKG_NAME@_LIBRARIES    - Libraries to link against.
#  @PKG_NAME@_LDFLAGS      - Linker flags.
#
# Additionally, it will create an imported target named @PROJECT_EXPORT_NAME@::@PROJECT_EXPORT_NAME@.
# You can link your library against that target using target_link_library(~),
# and all the variables mentioned above will automatically be pulled into your
# target.

# We explicitly set the desired cmake version to ensure that the policy settings
# of users or of toolchains do not result in the wrong behavior for our modules.
# Note that the call to find_package(~) will PUSH a new policy stack before
# taking on these version settings, and then that stack will POP after the
# find_package(~) has exited, so this will not affect the cmake policy settings
# of a caller.
cmake_minimum_required(VERSION 3.5.1 FATAL_ERROR)


if(@PKG_NAME@_CONFIG_INCLUDED)
  return()
endif()
set(@PKG_NAME@_CONFIG_INCLUDED TRUE)

@PACKAGE_INIT@

if(NOT TARGET @PROJECT_EXPORT_NAME@::@PROJECT_EXPORT_NAME@)
  include("${CMAKE_CURRENT_LIST_DIR}/@ign_targets_output@")
endif()

# On windows we produce .dll libraries with no prefix
if(WIN32)
 set(CMAKE_FIND_LIBRARY_PREFIXES "")
 set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".dll")
endif()

# Package variables. Note that @PKG_NAME@_LIBRARIES merely contains an imported
# target for the library, so it is sufficient to simply link to
# @PKG_NAME@_LIBRARIES. None of the other package variables are needed.
set(@PKG_NAME@_LIBRARIES @PROJECT_EXPORT_NAME@::@PROJECT_EXPORT_NAME@)
set(@PKG_NAME@_INCLUDE_DIRS "@PACKAGE_IGN_INCLUDE_INSTALL_DIR_FULL@")
set(@PKG_NAME@_LIBRARY_DIRS "@PACKAGE_IGN_LIB_INSTALL_DIR@")
set(@PKG_NAME@_LDFLAGS      "-L@PACKAGE_IGN_LIB_INSTALL_DIR@")

# Backwards compatibility variables
set(@PROJECT_NAME_NO_VERSION_UPPER@_LIBRARIES ${@PKG_NAME@_LIBRARIES})
set(@PROJECT_NAME_NO_VERSION_UPPER@_INCLUDE_DIRS ${@PKG_NAME@_INCLUDE_DIRS})

# These variables are used by ignition-cmake to automatically configure the
# pkgconfig files for ignition projects.
set(@PKG_NAME@_PKGCONFIG_ENTRY "@PKG_NAME@")
set(@PKG_NAME@_PKGCONFIG_TYPE PROJECT_PKGCONFIG_REQUIRES)

# Get access to the find_dependency utility
include(CMakeFindDependencyMacro)

# Find ignition-cmake, because we need its modules in order to find the rest of
# our dependencies.
find_dependency(ignition-cmake@IGNITION_CMAKE_VERSION_MAJOR@)

# Find each dependency of this project (if nothing is below, then the project
# has no external dependencies).@PROJECT_CMAKE_DEPENDENCIES@

# Specify the doxygen tag file
set(@PROJECT_NAME_NO_VERSION_UPPER@_DOXYGEN_TAGFILE "@CMAKE_INSTALL_PREFIX@/share/ignition/@PROJECT_NAME_LOWER@_@PROJECT_VERSION_MINOR@/@PROJECT_NAME_LOWER@.tag.xml")

# Specify the API url. This is where the doxygen tag file will resolve URLS to.
set(@PROJECT_NAME_NO_VERSION_UPPER@_API_URL "https://ignitionrobotics.org/api/@IGN_DESIGNATION@/@PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@")
